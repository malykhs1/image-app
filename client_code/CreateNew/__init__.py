from ._anvil_designer import CreateNewTemplate
from anvil import *
import anvil.server

import anvil.js
from anvil.js import window

MAX_MB_IMG = 15
WH_IMG = 625
CARD_WIDTH = '360px'


class Point():
  def __init__(self, x, y, rad, op_id):
    self.x = x
    self.y = y
    self.rad = rad
    self.op_id = op_id


class CreateNew(CreateNewTemplate):
  def __init__(self, **properties):
    # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    self.init_components(**properties)

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ
    self.locale = "en"
    self.img = None
    self.canvas_1 = None
    self.zoom = 1
    self.dz = 0
    self.dx = 0
    self.dy = 0
    self.sx = 0
    self.sy = 0
    self.minWH = 300
    self.cvsW = 300

    print("‚úÖ Create initialized (awaiting canvas)")

  # ====== JS ‚Üí Python –º–æ—Å—Ç —á–µ—Ä–µ–∑ anvil.call(...) ======

  @anvil.js.callable
  def set_canvas_ref(self, js_canvas):
    """–ü–æ–ª—É—á–∞–µ–º canvas –∏–∑ HTML –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É"""
    try:
      # –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª "—Å—ã—Ä–æ–π" DOM-—ç–ª–µ–º–µ–Ω—Ç ‚Äî –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º
      if not hasattr(js_canvas, "getContext"):
        js_canvas = anvil.js.wrap_dom_element(js_canvas)
      self.canvas_1 = js_canvas
      print("üé® Canvas connected successfully.")
      self.drawCanvas()
    except Exception as e:
      print("‚ùå Canvas init error:", e)

  @anvil.js.callable
  def file_loader_1_change(self, file, **event_args):
    """–ü–æ–ª—É—á–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ HTML input"""
    try:
      print("üìÅ File received:", file)
      self.file_loaded(file)
    except Exception as e:
      print("‚ùå file_loader_1_change error:", e)

  @anvil.js.callable
  def button_create_click(self, **event_args):
    """–ù–∞–∂–∞—Ç–∏–µ Download / Create ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ HTML"""
    print("üöÄ Starting artwork creation...")
    if not self.img:
      alert("Please upload an image first!")
      return
    try:
      # –ó–¥–µ—Å—å —Ç–≤–æ—è –ø—Ä–µ–∂–Ω—è—è –ª–æ–≥–∏–∫–∞ ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      speedText = "very fast"
      effectIntensity = 2
      effectType = "clahe"
      noMask = True
      mask_img = None
      cloth = False
      discDiam = 400

      # subRect ‚Äî –∫–∞–∫ —Ä–∞–Ω—å—à–µ (–µ—Å–ª–∏ –Ω–∞–¥–æ ‚Äî –¥–æ—Ä–∞–±–æ—Ç–∞–µ–º –ø–æ–∑–∂–µ)
      zoom = self.zoom + self.dz
      left = round(self.sx + self.dx)
      top = round(self.sy + self.dy)
      right = left + int(self.minWH * zoom)
      bot = top + int(self.minWH * zoom)
      subRect = (left, top, right, bot)

      cropped_img = self.get_cropped_img()

      paramsDict = {
        "speedText": speedText,
        "effectType": effectType,
        "effectIntensity": effectIntensity,
        "cloth": cloth,
        "noMask": noMask,
        "subRect": subRect,
        "discDiam": discDiam
      }

      print("üì° Calling backend...")
      row = anvil.server.call('create', cropped_img, paramsDict, mask_img, getattr(self.img, "name", "uploaded.jpg"))
      print("‚úÖ Product created successfully in Shopify!")
      alert("Product created successfully!")

      # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é / –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫
      # comp = Creation(locale=self.locale, item=row)

    except Exception as e:
      print("‚ùå Error:", e)
      alert("Server is currently unreachable. Please try again soon.")

  # ====== –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π ======

  def file_loaded(self, file):
    if not file:
      return
    # File –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –∫–∞–∫ JS File (–∏–º–µ–µ—Ç .size), –ª–∏–±–æ Anvil Media (–∏–º–µ–µ—Ç .length)
    size = getattr(file, "size", None) or getattr(file, "length", None)
    if size and size > MAX_MB_IMG * 1024 * 1024:
      alert(f"Maximal size is {MAX_MB_IMG} MB", title="File too large")
      return

    self.img = file
    print("üñºÔ∏è Image loaded successfully")

    if self.canvas_1:
      self.drawCanvas()
    else:
      print("‚ö†Ô∏è Canvas not ready yet ‚Äî skipping draw.")

  def drawCanvas(self):
    """–ü—Ä–æ—Å—Ç–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞-–∑–∞–≥–ª—É—à–∫–∞: –∫—Ä—É–≥ + –ø–æ–¥–ø–∏—Å—å.
       –†–µ–∞–ª—å–Ω—ã–π crop/zoom/drag –¥–æ–±–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —à–∞–≥–æ–º."""
    if not self.canvas_1:
      print("‚ö†Ô∏è Canvas not connected yet.")
      return

    try:
      ctx = self.canvas_1.getContext("2d")
      ctx.clearRect(0, 0, self.canvas_1.width, self.canvas_1.height)

      if not self.img:
        # Placeholder –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏
        ctx.fillStyle = "#f3f3f3"
        ctx.fillRect(0, 0, self.canvas_1.width, self.canvas_1.height)
        ctx.fillStyle = "#777"
        ctx.font = "16px Inter"
        ctx.textAlign = "center"
        ctx.fillText("Upload your image", self.canvas_1.width / 2, self.canvas_1.height / 2)
        return

      # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Ä–∏—Å—É–µ–º ¬´—Ä–∞–º–∫—É¬ª
      ctx.fillStyle = "#FFD48A"
      ctx.beginPath()
      ctx.arc(self.canvas_1.width / 2, self.canvas_1.height / 2, 120, 0, 6.283)
      ctx.fill()
      ctx.fillStyle = "#000"
      ctx.font = "16px Inter"
      ctx.textAlign = "center"
      ctx.fillText("Your uploaded image", self.canvas_1.width / 2, self.canvas_1.height / 2 + 150)
      print("üñåÔ∏è Canvas drawn successfully.")
    except Exception as e:
      print("‚ùå drawCanvas error:", e)

  def get_cropped_img(self):
    """–ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å Anvil-Canvas API –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ ‚Äî –º–æ–∂–Ω–æ –∫—Ä–æ–ø–Ω—É—Ç—å –∑–¥–µ—Å—å.
       –°–µ–π—á–∞—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π.
       (–ü–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º —Ä–µ–∞–ª—å–Ω—ã–π crop –∏–∑ HTML5 canvas ‚Üí BlobMedia ‚Üí Python)"""
    return self.img